<?php

/**
 * @file
 * Contains yudl_blocks.module.
 *
 * This module adds YUDL specific blocks.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\search_api\Entity\Index;

/**
 * Implements hook_help().
 */
function yudl_blocks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.yudl_blocks':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom blocks for YUDL.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Helper function to format a timestamp as F j, Y.
 *
 * @param DateTime $time
 *   A given timestamp.
 *
 * @return string
 *   Timestamp formatted as F j, Y.
 */
function yudl_blocks_format_time($time) {
  $t = new DateTime();
  $t->setTimestamp(strtotime($time));
  $t->setTimeZone(new DateTimeZone("America/Toronto"));
  return $t->format("F j, Y");
}

/**
 * Helper function to get most recently changed node's last modified date.
 *
 * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
 *   The entity type manager service.
 *
 * @return time
 *   Return last modified date.
 */
function yudl_blocks_get_latest_changed_node($entityTypeManager) {
  $query = $entityTypeManager->getStorage('node')->getQuery();
  $query->condition('status', 1);
  $query->sort('created', 'DESC');
  $query->range(0, 1);
  $result = $query->execute();
  $node = $result ? $entityTypeManager->getStorage('node')->load(reset($result)) : NULL;
  $last_modified_date = $node ? $node->getCreatedTime() : NULL;
  return yudl_blocks_format_time($last_modified_date);
}

/**
 * Helper function to get the number of unique languages in a collection.
 *
 * @param int $collection_node
 *   The nid of a collection.
 * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
 *   The entity type manager service.
 *
 * @return int
 *   Return number of unique languages.
 */
function yudl_blocks_get_languages_per_node($collection_node, $entityTypeManager) {
  $collection_node_id = (is_object($collection_node) ? $collection_node->id() : $collection_node);
  $node_storage = $entityTypeManager->getStorage('node');
  $node = $node_storage->load($collection_node_id);
  $translations = $node->getTranslationLanguages();
  return count($translations);
}

/**
 * Helper function to get count of unique models in a collection.
 *
 * Adapted from from:
 *  https://github.com/asulibraries/islandora-repo/blob/621e4e3fdc180450ae11ccfc41bd472b587ee90b/web
 *  /modules/custom/asu_collection_extras/asu_collection_extras.module.
 *
 * @param int $collection_node
 *   The nid of a given collection.
 *
 * @return array
 *   The number of unique models in a collection, and number of items
 *   in a collection.
 */
function yudl_blocks_solr_get_collection_children($collection_node) {
  $collection_node_id = (is_object($collection_node) ? $collection_node->id() : $collection_node);
  $result_set = [];
  if (!is_null($collection_node_id)) {
    $index = Index::load('default_solr_index');
    $server = $index->getServerInstance();
    $backend = $server->getBackend();
    $solrConnector = $backend->getSolrConnector();
    $solariumQuery = $solrConnector->getSelectQuery();
    $solariumQuery->addParam('q', '(itm_field_ancestors:' . $collection_node_id .
      ' OR itm_field_combined_member_of:' . $collection_node_id . ')');
    $solariumQuery->setFields(['its_nid', 'ds_changed', 'ds_created']);
    $solariumQuery->addSort('ds_changed', 'desc');
    $facetSet = $solariumQuery->getFacetSet();
    $facetSet->createFacetField('model')->setField('itm_field_model');
    $count = 0;
    $models = [];
    $solariumQuery->setStart($count)->setRows(1);
    $nids = $solrConnector->execute($solariumQuery);
    $count = $nids->getNumFound();
    if ($count) {
      $first_record = $nids->getDocuments()[0];
      if ($first_record) {
        $result_set['recent_created'] = $first_record->ds_created;
        $result_set['recent_changed'] = $first_record->ds_changed;
      }
      else {
        $result_set['recent_created'] = NULL;
        $result_set['recent_changed'] = NULL;
      }
      $model_facet = $nids->getFacetSet()->getFacet('model');
      foreach ($model_facet as $value => $mod_count) {
        if (!in_array($value, $models)) {
          $models[] = $value;
        }
      }
    }
    $result_set['item_count'] = $count;
    $model_count = count($models);
    $result_set['model_count'] = $model_count;
  }
  else {
    $result_set['recent_created'] = NULL;
    $result_set['recent_changed'] = NULL;
  }
  return $result_set;
}
